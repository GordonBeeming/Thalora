name: End-to-End Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install frontend dependencies
        working-directory: ./thalora-frontend
        run: pnpm install --no-frozen-lockfile

      - name: Install Playwright Browsers
        working-directory: ./thalora-frontend
        run: npx playwright install --with-deps

      - name: Set up SQL Server
        run: |
          docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=YourTestPassword123!' \
            -p 1433:1433 --name sqlserver-test \
            -d mcr.microsoft.com/mssql/server:2022-latest

          # Wait for SQL Server to be ready (using updated tool path and certificate trust)
          timeout 60 bash -c 'until docker exec sqlserver-test /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "YourTestPassword123!" -C -Q "SELECT 1" > /dev/null 2>&1; do sleep 2; done'

      - name: Create test database and tables
        run: |
          # Create the test database
          docker exec sqlserver-test /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "YourTestPassword123!" -C -Q "
          IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'ThaloraTestDB')
          BEGIN
              CREATE DATABASE ThaloraTestDB;
              PRINT 'Database ThaloraTestDB created successfully.';
          END
          ELSE
          BEGIN
              PRINT 'Database ThaloraTestDB already exists.';
          END"

          # Create the urls table
          docker exec sqlserver-test /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "YourTestPassword123!" -C -d ThaloraTestDB -Q "
          IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'urls')
          BEGIN
              CREATE TABLE urls (
                  id BIGINT IDENTITY(1,1) PRIMARY KEY,
                  original_url NVARCHAR(2048) NOT NULL,
                  shortened_url NVARCHAR(255) NOT NULL UNIQUE,
                  created_at DATETIME2 DEFAULT GETUTCDATE(),
                  updated_at DATETIME2 DEFAULT GETUTCDATE()
              );
              
              CREATE INDEX IX_urls_shortened_url ON urls(shortened_url);
              CREATE INDEX IX_urls_created_at ON urls(created_at);
              PRINT 'URLs table created successfully.';
          END"

      - name: Build backend
        working-directory: ./backend
        run: cargo build --release

      - name: Start backend in test mode
        working-directory: ./backend
        env:
          DATABASE_URL: "Server=localhost,1433;Database=ThaloraTestDB;User=sa;Password=YourTestPassword123!;TrustServerCertificate=true;"
          TEST_MODE: "true"
          SKIP_DOMAIN_VERIFICATION: "true"
          RUST_LOG: "info"
        run: |
          cargo run --release &
          echo $! > backend.pid

          # Wait for backend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8080/health > /dev/null 2>&1; do sleep 2; done'

      - name: Build frontend
        working-directory: ./thalora-frontend
        run: pnpm run build

      - name: Start frontend
        working-directory: ./thalora-frontend
        run: |
          # Install serve to serve the built files
          npm install -g serve
          # Start serving the build directory
          serve -s build -p 3000 &
          echo $! > frontend.pid

          # Wait for frontend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'

      - name: Run Playwright tests
        working-directory: ./thalora-frontend
        env:
          CI: true
        run: npx playwright test --reporter=html

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: thalora-frontend/playwright-report/
          retention-days: 30

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: thalora-frontend/test-results/
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          if [ -f ./thalora-frontend/frontend.pid ]; then
            kill $(cat ./thalora-frontend/frontend.pid) || true
          fi
          if [ -f ./backend/backend.pid ]; then
            kill $(cat ./backend/backend.pid) || true
          fi
          docker stop sqlserver-test || true
          docker rm sqlserver-test || true
